{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface HealthConnectPlugin {\n  checkAvailability(): Promise<{\n    availability: HealthConnectAvailability;\n  }>;\n  insertRecords(options: { records: Record[] }): Promise<{\n    recordIds: string[];\n  }>;\n  readRecord(options: { type: RecordType; recordId: string }): Promise<{\n    record: StoredRecord;\n  }>;\n  readRecords(options: {\n    type: RecordType;\n    timeRangeFilter: TimeRangeFilter;\n    dataOriginFilter?: string[];\n    ascendingOrder?: boolean;\n    pageSize?: number;\n    pageToken?: string;\n  }): Promise<{\n    records: StoredRecord[];\n    pageToken?: string;\n  }>;\n  getChangesToken(options: { types: RecordType[] }): Promise<{\n    token: string;\n  }>;\n  getChanges(options: { token: string }): Promise<{\n    changes: Change[];\n    nextToken: string;\n  }>;\n  requestHealthPermissions(options: { read: RecordType[]; write: RecordType[] }): Promise<{\n    grantedPermissions: string[];\n    hasAllPermissions: boolean;\n  }>;\n  checkHealthPermissions(options: { read: RecordType[]; write: RecordType[] }): Promise<{\n    grantedPermissions: string[];\n    hasAllPermissions: boolean;\n  }>;\n  revokeHealthPermissions(): Promise<void>;\n  openHealthConnectSetting(): Promise<void>;\n}\nexport type HealthConnectAvailability = 'Available' | 'NotInstalled' | 'NotSupported';\nexport type RecordType =\n  | 'ActiveCaloriesBurned'\n  | 'BasalBodyTemperature'\n  | 'BasalMetabolicRate'\n  | 'BloodGlucose'\n  | 'BloodPressure'\n  | 'BodyFat'\n  | 'BodyTemperature'\n  | 'BodyWaterMass'\n  | 'BoneMass'\n  | 'CervicalMucus'\n  | 'CyclingPedalingCadence'\n  | 'Distance'\n  | 'ElevationGained'\n  | 'ExerciseSession'\n  | 'FloorsClimbed'\n  | 'HeartRateSeries'\n  | 'HeartRateVariabilityRmssd'\n  | 'Height'\n  | 'Hydration'\n  // | 'IntermenstrualBleeding'\n  | 'LeanBodyMass'\n  // | 'MenstruationFlow'\n  // | 'MenstruationPeriod'\n  | 'Nutrition'\n  // | 'OvulationTest'\n  | 'OxygenSaturation'\n  // | 'PlannedExerciseSession'\n  // | 'Power'\n  | 'RespiratoryRate'\n  | 'RestingHeartRate'\n  // | 'SexualActivity'\n  | 'SleepSession'\n  // | 'SkinTemperature'\n  // | 'Speed'\n  | 'Steps'\n  // | 'StepsCadence'\n  | 'TotalCaloriesBurned'\n  | 'Vo2Max'\n  | 'Weight';\n  // | 'WheelchairPushes'\ntype RecordBase = {\n  metadata: RecordMetadata;\n};\ntype StoredRecord = RecordBase & Record;\nexport type Record =\n  | {\n      type: 'ActiveCaloriesBurned';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      energy: Energy;\n    }\n  | {\n      type: 'BasalBodyTemperature';\n      time: Date;\n      zoneOffset?: string;\n      temperature: Temperature;\n      measurementLocation:\n        | 'unknown'\n        | 'armpit'\n        | 'finger'\n        | 'forehead'\n        | 'mouth'\n        | 'rectum'\n        | 'temporal_artery'\n        | 'toe'\n        | 'ear'\n        | 'wrist'\n        | 'vagina';\n    }\n  | {\n      type: 'BasalMetabolicRate';\n      time: Date;\n      zoneOffset?: string;\n      basalMetabolicRate: Power;\n    }\n  | {\n      type: 'BloodGlucose';\n      time: Date;\n      zoneOffset?: string;\n      level: BloodGlucose;\n      specimenSource:\n        | 'unknown'\n        | 'interstitial_fluid'\n        | 'capillary_blood'\n        | 'plasma'\n        | 'serum'\n        | 'tears'\n        | 'whole_blood';\n      mealType: 'unknown' | 'breakfast' | 'lunch' | 'dinner' | 'snack';\n      relationToMeal: 'unknown' | 'general' | 'fasting' | 'before_meal' | 'after_meal';\n    }\n  | {\n      type: 'BloodPressure';\n      time: Date;\n      zoneOffset?: string;\n      systolic: Pressure;\n      diastolic: Pressure;\n      bodyPosition: 'unknown' | 'standing_up' | 'sitting_down' | 'lying_down' | 'reclining';\n      measurementLocation: 'unknown' | 'left_wrist' | 'right_wrist' | 'left_upper_arm' | 'right_upper_arm';\n    }\n  | {\n      type: 'BodyFat';\n      time: Date;\n      zoneOffset?: string;\n      percentage: Percentage;\n    }\n  | {\n      type: 'BodyTemperature';\n      time: Date;\n      zoneOffset?: string;\n      temperature: Temperature;\n      measurementLocation: 'unknown' | 'armpit' | 'finger' | 'forehead' | 'mouth' | 'rectum' | 'temporal_artery' | 'toe' | 'ear' | 'wrist' | 'vagina';\n    }\n  | {\n      type: 'BodyWaterMass';\n      time: Date;\n      zoneOffset?: string;\n      mass: Mass;\n    }\n  | {\n      type: 'BoneMass';\n      time: Date;\n      zoneOffset?: string;\n      mass: Mass;\n    }\n  | {\n      type: 'CervicalMucus';\n      time: Date;\n      zoneOffset?: string;\n      appearance?: number;\n      sensation?: number;\n    }\n  | {\n      type: 'CyclingPedalingCadence';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      samples: CyclingPedalingCadenceSample[];\n    }\n  | {\n      type: 'Distance';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      distance: Length;\n    }\n  | {\n      type: 'ElevationGained';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      elevation: Length;\n    }\n  | {\n      type: 'ExerciseSession';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      title?: string;\n      notes?: string;\n      exerciseType: number;\n    }\n  | {\n      type: 'FloorsClimbed';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      floors: number;\n    }\n  | {\n      type: 'HeartRateSeries';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      samples: HeartRateSample[];\n    }\n  | {\n      type: 'HeartRateVariabilityRmssd';\n      time: Date;\n      zoneOffset?: string;\n      heartRateVariabilityMillis: number;\n    }\n  | {\n      type: 'Height';\n      time: Date;\n      zoneOffset?: string;\n      height: Length;\n    }\n  | {\n      type: 'Hydration';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      volume: Volume;\n    }\n  | {\n      type: 'LeanBodyMass';\n      time: Date;\n      zoneOffset?: string;\n      mass: Mass;\n    }\n  | {\n      type: 'Nutrition';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      name?: String;\n      mealType?: number;\n      biotin?: Mass;\n      caffeine?: Mass;\n      calcium?: Mass;\n      energy?: Energy;\n      energyFromFat?: Energy;\n      chloride?: Mass;\n      cholesterol?: Mass;\n      chromium?: Mass;\n      copper?: Mass;\n      dietaryFiber?: Mass;\n      folate?: Mass;\n      folicAcid?: Mass;\n      iodine?: Mass;\n      iron?: Mass;\n      magnesium?: Mass;\n      manganese?: Mass;\n      molybdenum?: Mass;\n      monounsaturatedFat?: Mass;\n      niacin?: Mass;\n      pantothenicAcid?: Mass;\n      phosphorus?: Mass;\n      polyunsaturatedFat?: Mass;\n      potassium?: Mass;\n      protein?: Mass;\n      riboflavin?: Mass;\n      saturatedFat?: Mass;\n      selenium?: Mass;\n      sodium?: Mass;\n      sugar?: Mass;\n      thiamin?: Mass;\n      totalCarbohydrate?: Mass;\n      totalFat?: Mass;\n      transFat?: Mass;\n      unsaturatedFat?: Mass;\n      vitaminA?: Mass;\n      vitaminB12?: Mass;\n      vitaminB6?: Mass;\n      vitaminC?: Mass;\n      vitaminD?: Mass;\n      vitaminE?: Mass;\n      vitaminK?: Mass;\n      zinc?: Mass;\n    }\n  | {\n      type: 'OxygenSaturation';\n      time: Date;\n      zoneOffset?: string;\n      percentage: Percentage;\n    }\n  | {\n      type: 'RespiratoryRate';\n      time: Date;\n      zoneOffset?: string;\n      rate: number;\n    }\n  | {\n      type: 'RestingHeartRate';\n      time: Date;\n      zoneOffset?: string;\n      beatsPerMinute: number;\n    }\n  | {\n      type: 'SleepSession';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      title?: string;\n      notes?: string;\n      stages: SleepSessionStage[];\n    }\n  | {\n      type: 'Steps';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      count: number;\n    }\n  | {\n      type: 'TotalCaloriesBurned';\n      startTime: Date;\n      startZoneOffset?: string;\n      endTime: Date;\n      endZoneOffset?: string;\n      energy: Energy;\n    }\n  | {\n      type: 'Vo2Max';\n      time: Date;\n      zoneOffset?: string;\n      vo2MillilitersPerMinuteKilogram: number;\n    }\n  | {\n      type: 'Weight';\n      time: Date;\n      zoneOffset?: string;\n      weight: Mass;\n    };\nexport type RecordMetadata = {\n  id: string;\n  clientRecordId?: string;\n  clientRecordVersion: number;\n  lastModifiedTime: Date;\n  dataOrigin: string;\n};\nexport type Change =\n  | {\n      type: 'Upsert';\n      record: Record;\n    }\n  | {\n      type: 'Delete';\n      recordId: string;\n    };\nexport type TimeRangeFilter =\n  | {\n      type: 'before' | 'after';\n      time: Date;\n    }\n  | {\n      type: 'between';\n      startTime: Date;\n      endTime: Date;\n    };\nexport type Energy = {\n  unit: 'kcal'; // 'calories' | 'kilocalories' | 'joules' | 'kilojoules';\n  value: number;\n};\nexport type HeartRateSample = {\n  time: Date;\n  beatsPerMinute: number;\n};\nexport type CyclingPedalingCadenceSample = {\n  time: Date;\n  revolutionsPerMinute: number;\n};\nexport type SleepSessionStage = {\n  startTime: Date;\n  endTime: Date;\n  stage: number;\n};\nexport type Temperature = {\n  unit: 'celsius' | 'fahrenheit';\n  value: number;\n};\nexport type Percentage = {\n  value: number;\n};\nexport type Volume = {\n  unit: 'liter' | 'milliliter';\n  value: number;\n};\nexport type Power = {\n  unit: 'kcal'; // 'kilocaloriesPerDay' | 'watts';\n  value: number;\n};\nexport type Pressure = {\n  unit: 'mmHg'; // 'millimetersOfMercury';\n  value: number;\n};\nexport type Length = {\n  unit: 'meter' | 'kilometer' | 'mile' | 'inch' | 'feet';\n  value: number;\n};\nexport type Mass = {\n  unit: 'gram' | 'kilogram' | 'milligram' | 'microgram' | 'ounce' | 'pound';\n  value: number;\n};\nexport type BloodGlucose = {\n  unit: 'milligramsPerDeciliter' | 'millimolesPerLiter';\n  value: number;\n};\nexport {};\n"]}